#!/usr/bin/env python3
# Copyright Â© 2022 Cobalt <cobalt@cobalt.rocks> under the MIT license
# See either the LICENSE file in https://github.com/Chaostheorie/sponge or https://mit-license.org/

import sys
import argparse
from tempfile import TemporaryFile

if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog = 'sponge', description = 'Sponge is a simple python tool for reading from stdin and writing the collected input to a file')
    parser.add_argument('-t', '--tmp', action = argparse.BooleanOptionalAction, default = False, help = 'Buffer stdin output in a tmp file before writing', type = int)
    parser.add_argument('-e', '--error', action = argparse.BooleanOptionalAction, default = False, help = 'Read from stderr instead of stdin')
    parser.add_argument('file', action = 'store', default = None, help = 'File name to write to')

    args = parser.parse_args()

    # Check if destination is specified
    if not args.file:
        print(
            "You need to specify a destination file. See 'sponge --help' for usage information"
        )
        sys.exit(1)


    source = sys.stdin
    buffered = args.tmp

    if args.error:
      source = sys.stderr

    if not buffered:
        # slurp data from source
        data = source.buffer.read()

        # write data to destination
        with open(args.file, "wb") as destination:
            destination.write(data)

        # Exit here
        sys.exit(0)


    # Optional buffering of stdin in tmp file
    # Read data in chunks and write to tmp file
    with TemporaryFile() as tmp_buffer:
        data = None

        # Read from stdin and write chunks to tmp file
        with source as sf:
            while True:
                data = sf.buffer.read(1024)
                if data == b"":
                    break
                else:
                    tmp_buffer.write(data)

        # Flush buffer and return to start of tmp file
        tmp_buffer.flush()
        tmp_buffer.seek(0)

        # Clear and/ or create file
        with open(args.file, "wb+") as destination:
            destination.write(b"")

        # Open in append mode to allow chunked writing from tmp file
        with open(args.file, "ab") as destination:
            data = tmp_buffer.read(1024)

            # Write until all contents of tmp file are read
            while data != b"":
                destination.write(data)
                data = tmp_buffer.read(1024)

